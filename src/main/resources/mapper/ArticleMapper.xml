<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luopc1218.luopc1218server.repository.ArticleMapper">

    <resultMap id="getArticleInfoResponseMap"
               type="com.luopc1218.luopc1218server.entity.article.GetArticleInfoResponse">
        <result column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="content" property="content"/>
        <result column="authorId" property="authorId"/>
        <result column="authorName" property="authorName"/>
        <result column="authorAvatarUrl" property="authorAvatarUrl"/>
        <result column="viewCount" property="viewCount"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="deleteTime" property="deleteTime"/>
        <collection property="tags" javaType="java.util.List"
                    ofType="com.luopc1218.luopc1218server.entity.article.ArticleTag" column="{articleId=id}"
                    select="getArticleTagLinkList">
        </collection>
    </resultMap>

    <resultMap id="getArticleCommentListResponseMap"
               type="com.luopc1218.luopc1218server.entity.article.GetArticleCommentListResponse">
        <result column="id" property="id"/>
        <result column="articleId" property="articleId"/>
        <result column="authorId" property="authorId"/>
        <result column="authorName" property="authorName"/>
        <result column="authorAvatarUrl" property="authorAvatarUrl"/>
        <result column="content" property="content"/>
        <result column="commentId" property="commentId"/>
        <result column="subCommentId" property="subCommentId"/>
        <result column="createTime" property="createTime"/>
        <collection property="subCommentCount"
                    ofType="integer" column="{commentId=id}"
                    select="getArticleSubCommentCount">
        </collection>
    </resultMap>

    <resultMap id="getArticleSubCommentListResponseMap"
               type="com.luopc1218.luopc1218server.entity.article.GetArticleSubCommentListResponse">
        <result column="id" property="id"/>
        <result column="articleId" property="articleId"/>
        <result column="authorId" property="authorId"/>
        <result column="authorName" property="authorName"/>
        <result column="authorAvatarUrl" property="authorAvatarUrl"/>
        <result column="content" property="content"/>
        <result column="commentId" property="commentId"/>
        <result column="subCommentId" property="subCommentId"/>
        <result column="createTime" property="createTime"/>
        <collection property="replyComment"
                    ofType="com.luopc1218.luopc1218server.entity.article.GetArticleSubCommentListResponse"
                    column="{commentId=subCommentId}"
                    select="getArticleSubCommentById">
        </collection>
    </resultMap>

    <insert id="addArticle" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into article(title, description, content, authorId)
        values (#{addArticleBody.title}, #{addArticleBody.description}, #{addArticleBody.content},
                #{addArticleBody.userId});
    </insert>
    <update id="saveArticle">
        update article
        set title=#{saveArticleBody.title},
            description=#{saveArticleBody.description},
            content=#{saveArticleBody.content},
            updateTime=CURRENT_TIMESTAMP
        where id = #{saveArticleBody.id}
    </update>
    <update id="deleteArticle">
        update
            article
        set deleteTime=CURRENT_TIMESTAMP
        where id = #{deleteArticleBody.articleId}
          and authorId = #{deleteArticleBody.userId}
    </update>
    <insert id="addArticleTags" useGeneratedKeys="true" keyProperty="id">
        insert into article_tag(name) values
        <foreach item="item" collection="list" separator=",">
            (#{item.name})
        </foreach>
    </insert>

    <insert id="addArticleTagLink" useGeneratedKeys="true" keyProperty="id">
        insert into article_tag_link(articleId, tagId) values
        <foreach item="item" collection="list" separator=",">
            (#{item.articleId},#{item.tagId})
        </foreach>
    </insert>
    <delete id="deleteArticleTagLink">
        delete
        from article_tag_link
        where articleId = #{articleId};
    </delete>
    <select id="getArticleInfo" resultMap="getArticleInfoResponseMap">
        select a.id,
               title,
               description,
               content,
               authorId,
               u.name      as authorName,
               u.avatarUrl as authorAvatarUrl,
               a.viewCount,
               a.createTime,
               updateTime,
               deleteTime
        from article a
                 left join user u on a.authorId = u.id
        where a.id = #{getArticleInfoParams.id}
          and deleteTime is null;
    </select>
    <select id="getArticleList" resultMap="getArticleInfoResponseMap">
        select a.id,
        title,
        description,
        content,
        authorId,
        u.name as authorName,
        u.avatarUrl as authorAvatarUrl,
        a.viewCount,
        a.createTime,
        updateTime,
        deleteTime
        from article a
        left join user u on a.authorId = u.id
        where deleteTime is null
        <if test="getArticleListParams.authorId != null">
            and authorId=#{getArticleListParams.authorId}
        </if>
        order by a.updateTime desc, a.createTime desc
        <if test="getArticleListParams.limit != null">
            limit #{getArticleListParams.limit},#{getArticleListParams.pageSize}
        </if>
        ;
    </select>
    <update id="addArticleViewCount">
        update article
        set viewCount = viewCount + 1
        where id = #{addArticleViewCountBody.articleId}
    </update>
    <select id="getArticleListCount" resultType="integer">
        select COUNT(*) as count
        from article
        where deleteTime is null
        <if test="authorId != null">
            and authorId = #{authorId}
        </if>
        ;
    </select>
    <select id="getArticleFavoriteCount" resultType="integer">
        select COUNT(*) as count
        from article_favorite
        where articleId = #{articleId};
    </select>
    <select id="getArticleEvaluateCount" resultType="integer">
        select COUNT(*) as count
        from article_evaluate ae
        where articleId = #{articleId}
          and evaluate = #{evaluate};
    </select>
    <select id="getArticleFavorite" resultType="com.luopc1218.luopc1218server.entity.article.ArticleFavorite">
        select id, articleId, userId
        from article_favorite
        where articleId = #{articleId}
          and userId = #{userId};
    </select>
    <select id="getArticleEvaluate" resultType="com.luopc1218.luopc1218server.entity.article.ArticleEvaluate">
        select id, articleId, userId, evaluate
        from article_evaluate
        where articleId = #{articleId}
          and userId = #{userId}
    </select>
    <delete id="deleteArticleEvaluate">
        delete
        from article_evaluate
        where id = #{articleEvaluateId}
    </delete>
    <update id="changeArticleEvaluate">
        update article_evaluate
        set evaluate=#{evaluate}
        where id = #{id};
    </update>
    <insert id="addArticleEvaluate">
        insert into article_evaluate(articleId, evaluate, userId)
        VALUES (#{articleId}, #{evaluate}, #{userId});
    </insert>
    <select id="getArticleTagLinkList" resultType="com.luopc1218.luopc1218server.entity.article.ArticleTag">
        SELECT at.id, at.name, at.createTime
        from article_tag_link atl
        left join article_tag at on atl.tagId = at.id
        where true
        <if test="articleId != null">
            and articleId = #{articleId}
        </if>
        ;
    </select>
    <select id="getArticleTagList" resultType="com.luopc1218.luopc1218server.entity.article.ArticleTag">
        SELECT at.id, at.name, at.createTime
        from article_tag at
        where true
        <if test="getArticleTagListParams.query != null">
            and name like '${getArticleTagListParams.query}%'
        </if>
        ;
    </select>
    <delete id="deleteArticleFavorite">
        delete
        from article_favorite
        where articleId = #{articleId}
          and userId = #{userId};
    </delete>
    <insert id="addArticleFavorite">
        insert into article_favorite(articleId, userId)
        VALUES (#{articleId}, #{userId});
    </insert>
    <insert id="addArticleComment">
        insert into article_comment(articleId, authorId, content, replyContent, commentId, subCommentId)
        values (#{addArticleCommentBody.articleId}, #{addArticleCommentBody.authorId}, #{addArticleCommentBody.content},
                #{addArticleCommentBody.replyContent},
                #{addArticleCommentBody.commentId}, #{addArticleCommentBody.subCommentId})
    </insert>
    <select id="getArticleCommentList"
            resultMap="getArticleCommentListResponseMap">
        select
        ac.id, ac.articleId, ac.authorId, u.name as authorName, u.avatarUrl as
        authorAvatarUrl,ac.content,ac.replyContent,
        ac.commentId,ac.subCommentId,
        ac.createTime
        from article_comment ac
        left join user u on ac.authorId = u.id
        where articleId = #{getArticleCommentListParams.articleId} and ac.commentId is null
        order by ac.createTime desc
        <if test="getArticleCommentListParams.limit != null">
            limit #{getArticleCommentListParams.limit},#{getArticleCommentListParams.pageSize}
        </if>
    </select>
    <select id="getArticleCommentCount" resultType="integer">
        select COUNT(*) as count
        from article_comment
        where articleId = #{getArticleCommentListParams.articleId}
          and commentId is null
    </select>
    <select id="getArticleSubCommentList"
            resultMap="getArticleSubCommentListResponseMap">
        select
        ac.id, ac.articleId, ac.authorId, u.name as authorName, u.avatarUrl as
        authorAvatarUrl,ac.content,ac.replyContent,
        ac.commentId,
        ac.subCommentId,
        ac.createTime
        from article_comment ac
        left join user u on ac.authorId = u.id
        where commentId = #{getArticleSubCommentListParams.commentId}
        order by ac.createTime desc
        <if test="getArticleSubCommentListParams.limit != null">
            limit #{getArticleSubCommentListParams.limit},#{getArticleSubCommentListParams.pageSize}
        </if>
    </select>
    <select id="getArticleSubCommentCount" resultType="integer">
        select COUNT(*) as count
        from article_comment
        where commentId = #{commentId}
    </select>

    <select id="getArticleSubCommentById"
            resultType="com.luopc1218.luopc1218server.entity.article.GetArticleSubCommentListResponse">
        select ac.id,
               ac.articleId,
               ac.authorId,
               u.name      as authorName,
               u.avatarUrl as authorAvatarUrl,
               ac.content,
               ac.commentId,
               ac.subCommentId,
               ac.createTime
        from article_comment ac
                 left join user u on ac.authorId = u.id
        where ac.id = #{commentId}
    </select>
    <select id="getHotArticleList" resultMap="getArticleInfoResponseMap">
        select a.id,
               title,
               description,
               content,
               authorId,
               u.name      as authorName,
               u.avatarUrl as authorAvatarUrl,
               a.viewCount,
               a.createTime,
               updateTime,
               deleteTime
        from article a
                 left join user u on a.authorId = u.id
        where deleteTime is null
        order by viewCount desc
        limit 10;
    </select>

</mapper>